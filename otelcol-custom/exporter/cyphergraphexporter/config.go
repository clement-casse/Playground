package cyphergraphexporter // import "github.com/clement-casse/playground/otelcol-custom/exporter/cyphergraphexporter"

import (
	"errors"
	"net/url"

	"go.opentelemetry.io/collector/config/configopaque"
	"go.opentelemetry.io/collector/config/configretry"
)

const (
	defaultDatabaseURI = "bolt://localhost:7687"
	defaultUserAgent   = "opentelemetrycollector.cyphergraphexporter"
)

// Config defines configuration for the Cypher Graph exporter.
type Config struct {
	configretry.BackOffConfig `mapstructure:"retry_on_failure"`

	// DatabaseURI is the target address of a Neo4j instance. The URI is the Bolt URI
	// thats uses the following scheme:
	//   - 'bolt', 'bolt+s' or 'bolt+ssc' allow to connects to a single instance database
	//   - 'neo4j', 'neo4j+s' or 'neo4j+ssc' allow to connect to a cluster of databases
	//
	// Refer to [neo4j.NewDriverWithContext] documentation to understand how this value
	// is used.
	DatabaseURI string `mapstructure:"db_uri,omitempty"`

	// Username corresponds to the user name used in the basic authentication process
	// to the database.
	Username string `mapstructure:"username,omitempty"`

	// Password corresponds to the secret used in the basic authentication process
	// to the database.
	Password configopaque.String `mapstructure:"password,omitempty"`

	// BearerToken corresponds to a base64-encoded string generated by a Single Sign-On Provider.
	BearerToken configopaque.String `mapstructure:"bearer_token,omitempty"`

	// KerberosTicket corresponds to a base64-encoded string representing the kerberos ticket.
	KerberosTicket configopaque.String `mapstructure:"kerberos_ticket,omitempty"`

	// UserAgent corresponds to the value of the User-Agent field that is used in
	// the "bolt" (websocket) connection.
	UserAgent string `mapstructure:"user_agent,omitempty"`
}

var (
	errMultipleAuthMethod = errors.New("cannot mix multiple authentication methods")
)

func (cfg *Config) Validate() error {
	if _, err := url.Parse(cfg.DatabaseURI); err != nil {
		return err
	}
	if cfg.Username != "" && (string(cfg.BearerToken) != "" || string(cfg.KerberosTicket) != "") {
		return errMultipleAuthMethod
	}
	if string(cfg.BearerToken) != "" && string(cfg.KerberosTicket) != "" {
		return errMultipleAuthMethod
	}
	return nil
}
